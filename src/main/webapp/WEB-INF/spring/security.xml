<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<http pattern="/static/**" security="none" />
	<http pattern="/favicon.ico" security="none" />
	<http pattern="/signup/**" security="none" />


	<http entry-point-ref="authenticationEntryPoint" use-expressions="true">
		<!-- Authentication policy -->
		<!-- <form-login login-page="/" authentication-failure-url="/?error=bad_credentials" 
			/> -->
		<logout delete-cookies="JSESSIONID" />
		<intercept-url pattern="/app/**" access="isAuthenticated()" />
		<custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER" />
		<!-- <remember-me />-->
	</http>
	<beans:bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:constructor-arg index="0" value="/login" />
	</beans:bean>
	<beans:bean id="authenticationFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<!-- <beans:property name="sessionAuthenticationStrategy" ref="sas" /> -->
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="authenticationFailureHandler"
			ref="customAuthenticationFailureHandler" />
		<beans:property name="authenticationSuccessHandler"
			ref="customAuthenticationSuccessHandler" />
	</beans:bean>
	<beans:bean id="customAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/app/home" />
	</beans:bean>
	<beans:bean id="customAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/login?error=other" />
		<beans:property name="exceptionMappings">
			<beans:props>
				<beans:prop
					key="org.springframework.security.authentication.CredentialsExpiredException">/login?error=resetPassword</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.BadCredentialsException">/login?error=BadCredentials</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.AccountExpiredException">/login?error=AccountExpired</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.AccountStatusException">/login?error=AccountStatus</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.AuthenticationCredentialsNotFoundException">/login?error=AuthenticationCredentialsNotFound</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.AuthenticationServiceException">/login?error=AuthenticationService</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.DisabledException">/login?error=Disabled</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.InsufficientAuthenticationException">/login?error=InsufficientAuthentication</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.LockedException">/login?error=Locked</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.ProviderNotFoundException">/login?error=ProviderNotFound</beans:prop>
				<beans:prop
					key="org.springframework.security.authentication.SessionAuthenticationException">/login?error=SessionAuthenticationException</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	<authentication-manager alias="authenticationManager">
		<!-- <authentication-provider user-service-ref="userDetailsService"> <password-encoder 
			ref="passwordEncoder" /> </authentication-provider> -->
		<authentication-provider
			ref="ldapAuthProvider" />
	</authentication-manager>

	<!-- <jdbc-user-service id="userDetailsService" data-source-ref="dataSource" 
		users-by-username-query="select username, password, active from users where 
		username = ?" authorities-by-username-query="select username, 'ROLE_USER' 
		from users where username = ?" /> -->
	<beans:bean id="ldapAuthProvider"
		class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<beans:constructor-arg ref="authenticator" />
		<beans:constructor-arg ref="authoritiesPopulator" />
	</beans:bean>
	<beans:bean id="authenticator"
		class="org.springframework.security.ldap.authentication.BindAuthenticator">
		<beans:constructor-arg ref="contextSource" />
		<beans:property name="userDnPatterns">
			<beans:list>
				<beans:value>sAMAccountName={0}</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="userSearch" ref="userSearch" />
	</beans:bean>
	<beans:bean id="authoritiesPopulator"
		class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
		<beans:constructor-arg ref="contextSource" />
		<beans:constructor-arg value="" /> <!-- From the root DN of the context factory -->
		<beans:property name="groupRoleAttribute" value="cn" />
		<beans:property name="searchSubtree" value="true" />
		<beans:property name="ignorePartialResultException">
			<beans:value>false</beans:value>
		</beans:property>
	</beans:bean>
	<beans:bean id="contextSource"
		class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<beans:constructor-arg value="ldap://10.90.102.151:389/DC=group,DC=local" />
		<beans:property name="userDn"
			value="CN=Liuzzi Paolo Francesco,OU=Users,OU=External-Users,DC=group,DC=local" />
		<beans:property name="password" value="Atos12345" />
		<beans:property name="baseEnvironmentProperties">
			<beans:map>
				<beans:entry key="java.naming.referral">
					<beans:value>follow</beans:value> <!-- Avoid error: Unprocessed Continuation Reference(s); remaining name '' -->
				</beans:entry>
			</beans:map>
		</beans:property>
	</beans:bean>

	<beans:bean id="userSearch"
		class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
		<beans:constructor-arg>
			<beans:value></beans:value> <!-- blank value is required here! search base -->
			<!-- se vuoto allora cerca in tutto LDAP, ma non è bello :D al momento 
				lo lascio vuoto ma andrà messo con il nome del gruppo creato su AD <value>OU=A2A 
				ENERGIA SPA</value> -->
		</beans:constructor-arg>
		<beans:constructor-arg>
			<beans:value>(sAMAccountName={0})</beans:value>
		</beans:constructor-arg>
		<beans:constructor-arg ref="contextSource" />
		<beans:property name="searchSubtree">
			<beans:value>true</beans:value>
		</beans:property>
	</beans:bean>


	<ldap-server url="ldap://10.90.102.151:389/DC=group,DC=local"
		manager-dn="CN=Liuzzi Paolo Francesco,OU=Users,OU=External-Users,DC=group,DC=local"
		manager-password="Atos12345" />


	<beans:bean id="textEncryptor"
		class="org.springframework.security.crypto.encrypt.Encryptors"
		factory-method="noOpText" />

	<beans:bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.NoOpPasswordEncoder"
		factory-method="getInstance" />

</beans:beans>